=============================================================================================================================

//app.json

{
  "expo": {
    "name": "Museo",
    "slug": "museo",
    "scheme": "capstonereact",   // ðŸ‘ˆ must match everywhere
    "sdkVersion": "51.0.0"
  }
}



====================================================================================================================
supabase/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://YOUR-PROJECT.supabase.co';
const SUPABASE_ANON_KEY = 'YOUR_ANON_KEY';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: { persistSession: true, autoRefreshToken: true },
});



============================================================================================================================
app/index.js
import React, { useState, useEffect } from "react";
import {
  StyleSheet, View, Text, Image, SafeAreaView,
  TouchableOpacity, Alert, KeyboardAvoidingView, Platform
} from "react-native";
import { Input, Button, Icon } from "react-native-elements";
import { Link, useRouter } from "expo-router";
import { supabase } from "../supabase/supabaseClient";
import "react-native-url-polyfill/auto";
import * as Linking from "expo-linking";
import * as WebBrowser from "expo-web-browser";

WebBrowser.maybeCompleteAuthSession();

export default function LoginScreen() {
  const [focusedInput, setFocusedInput] = useState(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [message, setMessage] = useState("");

  const router = useRouter();
  const commonInputContainerStyle = { borderBottomWidth: 0, height: 30 };

  // ðŸ”¹ Auto-redirect if already logged in
  useEffect(() => {
    (async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) router.replace("/home");
    })();
  }, []);

  // ---------- Email/Password ----------
  async function handleLogin() {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) return setMessage(error.message);
    Alert.alert("Success", "Logged in!");
    router.replace("/home");
  }

  // ---------- Google OAuth ----------
  async function handleGoogleLogin() {
    try {
      const redirectUrl = Linking.createURL("auth/callback", { scheme: "capstonereact" });
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: redirectUrl,
          queryParams: { prompt: "select_account" }
        }
      });
      if (error) setMessage(error.message);
      // No need to call exchangeCodeForSession:
      // Supabase will handle it and trigger onAuthStateChange
    } catch (err) {
      console.error("Google login error:", err);
      setMessage("Something went wrong");
    }
  }

  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === "ios" ? "padding" : undefined}>
      <SafeAreaView style={styles.container}>
        <Image source={require("../assets/Museo_Logo.png")} style={styles.logo} />
        <Text style={styles.title}>LOGIN</Text>

        {/* Email */}
        <View style={styles.inputWrapper}>
          {!email && <Text style={styles.placeholderText}>Email</Text>}
          <Input
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            autoCapitalize="none"
            containerStyle={[styles.inputContainer, focusedInput === "email" && styles.focusedContainer]}
            inputContainerStyle={commonInputContainerStyle}
            inputStyle={styles.inputStyle}
            onFocus={() => setFocusedInput("email")}
            onBlur={() => setFocusedInput(null)}
          />
        </View>

        {/* Password */}
        <View style={styles.inputWrapper}>
          {!password && <Text style={styles.placeholderText}>Password</Text>}
          <Input
            value={password}
            onChangeText={setPassword}
            secureTextEntry={!showPassword}
            containerStyle={[styles.inputContainer, focusedInput === "password" && styles.focusedContainer]}
            inputContainerStyle={commonInputContainerStyle}
            inputStyle={styles.inputStyle}
            onFocus={() => setFocusedInput("password")}
            onBlur={() => setFocusedInput(null)}
            rightIcon={
              <Icon
                name={showPassword ? "eye" : "eye-off"}
                type="ionicon"
                color="#000"
                size={22}
                onPress={() => setShowPassword(!showPassword)}
                containerStyle={{ marginTop: 20 }}
              />
            }
          />
        </View>

        <TouchableOpacity style={styles.forgotPasswordContainer}>
          <Text style={styles.forgotPassword}>Forgot your password?</Text>
        </TouchableOpacity>

        <Button
          title="Login with Email"
          onPress={handleLogin}
          buttonStyle={styles.loginButton}
          titleStyle={styles.loginButtonTitle}
          containerStyle={styles.loginButtonContainer}
        />

        {message ? <Text style={styles.errorMsg}>{message}</Text> : null}

        <View style={styles.signupContainer}>
          <Text style={styles.signupText}>Create Account?</Text>
          <Link href="/signup" style={styles.signupLink}>Register</Link>
        </View>

        <TouchableOpacity style={styles.googleButton} onPress={handleGoogleLogin}>
          <Image source={require("../assets/googlelogo.jpg")} style={styles.googleLogo} />
          <Text style={styles.googleText}>Continue with Google</Text>
        </TouchableOpacity>
      </SafeAreaView>
    </KeyboardAvoidingView>
  );
}

// ---------- Styles ----------
const styles = StyleSheet.create({
  container: { flex: 1, alignItems: "center", backgroundColor: "#fff", paddingHorizontal: 30, paddingTop: 60 },
  logo: { width: 200, height: 100, resizeMode: "contain", marginTop: 50, marginBottom: 30 },
  title: { fontSize: 22, fontWeight: "bold", color: "#000", marginBottom: 8 },
  inputWrapper: { width: "100%", position: "relative" },
  placeholderText: { position: "absolute", top: 17, left: 15, color: "#888", zIndex: 1 },
  inputContainer: { width: "100%", marginBottom: 15, borderWidth: 1, borderColor: "#ccc", borderRadius: 8, backgroundColor: "#fff", paddingHorizontal: 5 },
  focusedContainer: { borderColor: "#000", borderWidth: 2 },
  inputStyle: { fontSize: 18, color: "#000", top: 12, textAlignVertical: "center" },
  forgotPasswordContainer: { alignSelf: "flex-end", marginBottom: 30 },
  forgotPassword: { fontSize: 14, color: "#888" },
  loginButtonContainer: { width: "100%" },
  loginButton: { backgroundColor: "#fff", borderRadius: 30, paddingVertical: 15, borderWidth: 1, borderColor: "#000" },
  loginButtonTitle: { fontSize: 18, fontWeight: "bold", color: "#000" },
  signupContainer: { flexDirection: "row", marginTop: 25 },
  signupText: { fontSize: 16, color: "#888" },
  signupLink: { fontSize: 16, fontWeight: "bold", color: "#000", marginLeft: 5 },
  googleButton: { flexDirection: "row", alignItems: "center", backgroundColor: "#fff", borderWidth: 1, borderColor: "#ccc", borderRadius: 30, paddingVertical: 12, paddingHorizontal: 20, marginTop: 15, width: "100%", justifyContent: "center" },
  googleLogo: { width: 20, height: 20, marginRight: 10, resizeMode: "contain" },
  googleText: { fontSize: 16, color: "#000" },
  errorMsg: { color: "red", marginTop: 10 }
});



================================================================================================
app/auth/callback.js
import { useEffect } from "react";
import { useRouter } from "expo-router";
import { supabase } from "../../supabase/supabaseClient";

export default function AuthCallback() {
  const router = useRouter();

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        if (session) {
          console.log("Logged in as:", session.user.email);
          router.replace("/home");
        }
      }
    );
    return () => subscription.unsubscribe();
  }, []);

  return null;
}
